<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[less学习笔记]]></title>
    <url>%2F2017%2F12%2F24%2FWhat%20is%20less%2F</url>
    <content type="text"><![CDATA[养成学习做笔记的好习惯，从我做起,今天学习less. 简介lesscss是一种动态样式语言，属于css预处理语言的一种，他使用类似css的语法，为css的赋予了动态语言的特性，如变量、继承、运算、函数等，更方便css的编写和维护。lesscss可以在多种语言、环境中实用，包括浏览器端、桌面客户端、服务器。 编译环境1.下载安装visual studio code工具 在扩展中装插件easy less,easy sass,view in browser 注意：安装成功后重新加载一次2.下载安装node.js(编译环境，将所写的less和sass转换成css). LESS 语法1.注释/ / 和css没区别2.用@声明变量]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于正则的一些事]]></title>
    <url>%2F2017%2F12%2F20%2F%E5%85%B3%E4%BA%8E%E6%AD%A3%E5%88%99%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[本篇主要梳理一下什么是正则，以及正则的运用，都是一些个人的理解,自己的笔记才是最好的笔记。 什么是正则?什么是正则呢，通俗地说就是给计算机读的规则，主要用来匹配字符串。下面是官方的解释:正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。 正则表达式的写法1234var str = 'I am a teacher!';var reg = new RegExp('teacher');console.log(reg.test(str));//true 比如说我们想要知道上面这句英文中有没有’teacher’,正则.测试(目标字符串),结果输出为true，’teacher’存在。 转义 转义字符(元字符) 作用 \w 查找单词字符。 \W 查找非单词字符。 \d 查找数字。 \D 查找非数字字符。 \s 查找空白字符。 \S 查找非空白字符。 \b 匹配单词边界。 \B 匹配非单词边界。 \0 查找 NUL 字符。 \n 查找换行符。 \f 查找换页符。 \r 查找回车符。 \t 查找制表符。 \v 查找垂直制表符。 \xxx 查找以八进制数 xxx 规定的字符。 \xdd 查找以十六进制数 dd 规定的字符。 \uxxxx 查找以十六进制数 xxxx 规定的 Unicode 字符。 \b注意两点:1.\b只能匹配字母、数字、汉字、下划线2.\b就近匹配，比如\bAB 匹配A，AB\b 匹配B；但如果只写一个\b或者在两个字母、数字、汉字、下划线之间有\b时就在所有字符或者两个字母、数字、汉字、下划线之间所有字符去逐个匹配 例子:检测字符串中有没有数字 1234var str = 'CCTV12';var reg = new RegExp(/\d/);console.log(reg.test(str));//true 修饰符 修饰符 作用 i 查找时不区分大小写 g 全局查找匹配 m 多行查找匹配 1234var str = 'YoU HavE A GrEEn HaT';var reg = new RegExp(/a/ig);console.log(str.match(reg));//(3) ["a", "A", "a"] 修饰符可以一起用,上面的代码全局并且不区分大小写地找出了字符串里面的所有的a。 量词 量词 作用 n+ 匹配任何包含至少一个 n 的字符串。 n* 匹配任何包含零个或多个 n 的字符串。 n? 匹配任何包含零个或一个 n 的字符串。 n{X} 匹配包含 X 个 n 的序列的字符串。 n{X,Y} 匹配包含 X 至 Y 个 n 的序列的字符串。 n{X,} 匹配包含至少 X 个 n 的序列的字符串。 n$ 匹配任何结尾为 n 的字符串。 ^n 匹配任何开头为 n 的字符串。 ?=n 匹配任何其后紧接指定字符串 n 的字符串。 ?!n 匹配任何其后没有紧接指定字符串 n 的字符串。 括号表达式 表达式 作用 [abc] 查找方括号之间的任何字符。 [^abc] 查找任何不在方括号之间的字符。 [0-9] 查找任何从 0 至 9 的数字。 [a-z] 查找任何从小写 a 到小写 z 的字符。 [A-Z] 查找任何从大写 A 到大写 Z 的字符。 [A-z] 查找任何从大写 A 到小写 z 的字符。 [adgk] 查找给定集合内的任何字符。 [^adgk] 查找给定集合外的任何字符。 (red│blue│green) 查找任何指定的选项。 String对象的方法 方法函数 作用 search 检索与正则表达式相匹配的值。 match 找到一个或多个正则表达式的匹配。 replace 替换与正则表达式匹配的子串。 split 把字符串分割为字符串数组。 RegExp 对象方法 方法函数 作用 compile 编译正则表达式。 exec 检索字符串中指定的值。返回找到的值，并确定其位置。 test 检索字符串中指定的值。返回 true 或 false。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[es6中匿名函数如何简写]]></title>
    <url>%2F2017%2F12%2F18%2Fes6%E4%B8%AD%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%A6%82%E4%BD%95%E7%AE%80%E5%86%99%2F</url>
    <content type="text"><![CDATA[“=&gt;”的运用1(function()&#123;console.log('aa')&#125;)(); 上面这句话和下面这句话是等价的1(()=&gt;console.log('aa'))(); 中括号可以忽略,输出结果为123aabb[Finished in 0.4s]]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO目录详解]]></title>
    <url>%2F2017%2F12%2F03%2FHEXO%E7%9B%AE%E5%BD%95%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[hexo 中英目录对照 hexo 中英目录1234567891011121314151617181920212223242526272829303132333435363738├── .github #git信息├── languages #多语言| ├── default.yml #默认语言| └── zh-Hans.yml #简体中文| └── zh-tw.yml #繁体中文├── layout #布局，根目录下的*.ejs文件是对主页，| | 分页，存档等的控制| ├── _custom #可以自己修改的模板，覆盖原有模板| | ├── _header.swig #头部样式| | ├── _sidebar.swig #侧边栏样式| ├── _macro #可以自己修改的模板，覆盖原有模板| | ├── post.swig #文章模板| | ├── reward.swig #打赏模板| | ├── sidebar.swig #侧边栏模板| ├── _partial #局部的布局| | ├── head #头部模板| | ├── search #搜索模板| | ├── share #分享模板| ├── _script #局部的布局| ├── _third-party #第三方模板| ├── _layout.swig #主页面模板| ├── index.swig #主页面模板| ├── page #页面模板| └── tag.swig #tag模板├── scripts #script源码| ├── tags #tags的script源码| ├── marge.js #页面模板├── source #源码| ├── css #css源码| | ├── _common #*.styl基础css| | ├── _custom #*.styl局部css| | └── _mixins #mixins的css| ├── fonts #字体| ├── images #图片| ├── uploads #添加的文件| └── js #javascript源代码├── _config.yml #主题配置文件└── README.md #用GitHub的都知道]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
