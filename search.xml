<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SASS 学习笔记]]></title>
    <url>%2F2017%2F12%2F26%2FSASS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[今天学习SASS,决定以后用SASS不用LESS了。 关于SASS1.什么是sass?SASS是一种CSS的开发工具(css预处理工具)，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。 2.为什么需要css预处理?当我们写一些大型项目的时候sass可以提高我们的开发效率，而且相对于css更好维护。 关于Compass1.什么是Compass？Compass是Sass的工具库在Sass的基础上封装了一系列有用的模块和模板，补充Sass的功能Compass与Sass的关系类似于jQucry与javaScript的关系 2.Compass能做什么?使用变量自动转换RGBA颜色值忘记浏览器前缀嵌套规则media query更简单自动压缩CSS sass变量普通变量sass的变量必须是\$开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号分隔开就像CSS属性设置一样。变量可以是属性(width,height,color…..)，也可以是属性值(10px,#00FFFF,bold,norma…..)。但是如果变量作为属性或在某些特殊情况下等则必须要以 #{\$variables}形式使用。1234567891011121314151617181920212223//sass style//-------------------------------$borderDirection: top !default; $baseFontSize: 12px !default;$baseLineHeight: 1.5 !default;//应用于class和属性.border-#&#123;$borderDirection&#125;&#123; border-#&#123;$borderDirection&#125;:1px solid #ccc;&#125;//应用于复杂的属性值body&#123; font:#&#123;$baseFontSize&#125;/#&#123;$baseLineHeight&#125;;&#125;//css style//-------------------------------.border-top&#123; border-top:1px solid #ccc;&#125;body &#123; font: 12px/1.5;&#125; 全局变量 !global在变量值后面加上 !global即为全局变量。12345678910111213141516//scss style$x:12px;//变量$xbody&#123; $x: 14px; //此处定义的$x为局部变量 font-size:$x;&#125;p&#123; font-size:$x;&#125;//转换为css stylebody &#123; font-size: 14px;&#125;p &#123; font-size: 12px;&#125; 如果我们将局部变量$x改为全局变量!global。12345678910111213141516//scss style$xx:12px;body&#123; $xx: 14px!global; //设置成全局变量 font-size:$xx;&#125;p&#123; font-size:$xx;&#125;//转换为css stylebody &#123; font-size: 14px;&#125;p &#123; font-size: 14px;//注意此处的变化&#125; 设置变量默认值默认值的使用12345678910//scss style$cc:red!default;body&#123; background:$cc;&#125;//css stylebody &#123; background: red;&#125; 怎么一看和不写!default没啥区别啊，我们看下一个例子1234567891011//scss style $cc:blue;//重新设置变量$cc$cc:red!default;body&#123; background:$cc;&#125;//css stylebody &#123; background: blue;&#125; 如果我们没加!default,background一定为red。赋值的先后顺序大家都知道;这里说明被定义的默认值可以在任意位置被覆盖。 多值变量多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。 listlist数据可通过空格，逗号或小括号分隔多个值，可用 nth(\$var,\$index)取值。关于list数据操作还有很多其他函数如 length(\$list)， join(\$list1,\$list2,[\$separator])， append(\$list,\$value,[\$separator])等，具体可参考 sass Functions（搜索 List Functions即可） 定义123$px: 5px 10px 20px 30px;//一维数组$px: 5px 10px, 20px 30px;//二维数组$px: (5px 10px) (20px 30px);//二维数组 使用123456789//scss tyle$px: 5px 10px 20px 30px;body&#123; height:nth($px,2);//注意不是从0开始&#125;// css stylebody &#123; height: 10px;&#125; mapmap数据以key和value成对出现，其中value又可以是list。格式为： \$map: (key1: value1, key2: value2, key3: value3);。可通过 map-get(\$map,\$key)取值。关于map数据还有很多其他函数如 map-merge(\$map1,\$map2)， map-keys(\$map)， map-values(\$map)等，具体可参考 sass Functions（搜索 Map Functions即可） 定义$heading: (h1: 2em, h2: 1.5em, h3: 1.2em); 使用1234567891011121314151617181920//sass style//-------------------------------$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);@each $header, $size in $headings &#123; #&#123;$header&#125; &#123; font-size: $size; &#125;&#125;//css style//-------------------------------h1 &#123; font-size: 2em; &#125;h2 &#123; font-size: 1.5em; &#125;h3 &#123; font-size: 1.2em; &#125; 嵌套(Nesting)sass的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。我们一般说起或用到的都是选择器的嵌套。 选择器嵌套所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。在选择器嵌套中，可以使用 &amp;表示父元素选择器1234567891011121314151617181920212223242526272829303132333435363738//sass style//-------------------------------#top_nav&#123; line-height: 40px; text-transform: capitalize; background-color:#333; li&#123; float:left; &#125; a&#123; display: block; padding: 0 10px; color: #fff; &amp;:hover&#123; color:#ddd; &#125; &#125;&#125;//css style//-------------------------------#top_nav&#123; line-height: 40px; text-transform: capitalize; background-color:#333;&#125; #top_nav li&#123; float:left;&#125;#top_nav a&#123; display: block; padding: 0 10px; color: #fff;&#125;#top_nav a:hover&#123; color:#ddd;&#125; 属性嵌套所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。拿个官网的实例看下：12345678910111213141516171819202122232425//sass style//-------------------------------.fakeshadow &#123; border: &#123; style: solid; left: &#123; width: 4px; color: #888; &#125; right: &#123; width: 2px; color: #ccc; &#125; &#125;&#125;//css style//-------------------------------.fakeshadow &#123; border-style: solid; border-left-width: 4px; border-left-color: #888; border-right-width: 2px; border-right-color: #ccc; &#125; @at-root 跳出嵌套普通跳出嵌套1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//sass style//-------------------------------//没有跳出.parent-1 &#123; color:#f00; .child &#123; width:100px; &#125;&#125;//单个选择器跳出.parent-2 &#123; color:#f00; @at-root .child &#123; width:200px; &#125;&#125;//多个选择器跳出.parent-3 &#123; background:#f00; @at-root &#123; .child1 &#123; width:300px; &#125; .child2 &#123; width:400px; &#125; &#125;&#125;//css style//-------------------------------.parent-1 &#123; color: #f00;&#125;.parent-1 .child &#123; width: 100px;&#125;.parent-2 &#123; color: #f00;&#125;.child &#123; width: 200px;&#125;.parent-3 &#123; background: #f00;&#125;.child1 &#123; width: 300px;&#125;.child2 &#123; width: 400px;&#125; @at-root (without: …)和 @at-root (with: …)[仅供参考 ]默认 @at-root只会跳出选择器嵌套，而不能跳出 @media或 @support，如果要跳出这两种，则需使用 @at-root (without: media)， @at-root (without: support)。这个语法的关键词有四个： all（表示所有）， rule（表示常规css）， media（表示media）， support（表示support，因为 @support目前还无法广泛使用，所以在此不表）。我们默认的 @at-root其实就是 @at-root (without:rule)。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//sass style//-------------------------------//跳出父级元素嵌套@media print &#123; .parent1&#123; color:#f00; @at-root .child1 &#123; width:200px; &#125; &#125;&#125;//跳出media嵌套，父级有效@media print &#123; .parent2&#123; color:#f00; @at-root (without: media) &#123; .child2 &#123; width:200px; &#125; &#125; &#125;&#125;//跳出media和父级@media print &#123; .parent3&#123; color:#f00; @at-root (without: all) &#123; .child3 &#123; width:200px; &#125; &#125; &#125;&#125;//sass style//-------------------------------@media print &#123; .parent1 &#123; color: #f00; &#125; .child1 &#123; width: 200px; &#125;&#125;@media print &#123; .parent2 &#123; color: #f00; &#125;&#125;.parent2 .child2 &#123; width: 200px;&#125;@media print &#123; .parent3 &#123; color: #f00; &#125;&#125;.child3 &#123; width: 200px;&#125; @at-root与 &amp;配合使用12345678910111213//sass style//-------------------------------.child&#123; @at-root .parent &amp;&#123; color:#f00; &#125;&#125;//css style//-------------------------------.parent .child &#123; color: #f00;&#125; 应用于@keyframe12345678910111213141516171819202122//sass style//-------------------------------.demo &#123; ... animation: motion 3s infinite; @at-root &#123; @keyframes motion &#123; ... &#125; &#125;&#125;//css style//------------------------------- .demo &#123; ... animation: motion 3s infinite;&#125;@keyframes motion &#123; ...&#125; 混合(mixin)sass中使用 @mixin声明混合，可以传递参数，参数名以$符号开始，多个参数以逗号分开，也可以给参数设置默认值。声明的 @mixin通过 @include来调用。 无参数mixin12345678910111213141516//sass style//-------------------------------@mixin center-block &#123; margin-left:auto; margin-right:auto;&#125;.demo&#123; @include center-block;&#125;//css style//-------------------------------.demo&#123; margin-left:auto; margin-right:auto;&#125; 有参数mixin12345678910111213141516171819202122//sass style//------------------------------- @mixin opacity($opacity:50) &#123; opacity: $opacity / 100; filter: alpha(opacity=$opacity);&#125;.opacity&#123; @include opacity; //参数使用默认值&#125;.opacity-80&#123; @include opacity(80); //传递参数&#125;//css style//-------------------------------.opacity &#123; opacity: 0.5; filter: alpha(opacity=50);&#125;.opacity-80 &#123; opacity: 0.8; filter: alpha(opacity=80);&#125; 多个参数mixin调用时可直接传入值，如 @include传入参数的个数小于 @mixin定义参数的个数，则按照顺序表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。1234567891011121314151617181920212223242526//sass style//------------------------------- @mixin horizontal-line($border:1px dashed #ccc, $padding:10px)&#123; border-bottom:$border; padding-top:$padding; padding-bottom:$padding; &#125;.imgtext-h li&#123; @include horizontal-line(1px solid #ccc);&#125;.imgtext-h--product li&#123; @include horizontal-line($padding:15px);&#125;//css style//-------------------------------.imgtext-h li &#123; border-bottom: 1px solid #cccccc; padding-top: 10px; padding-bottom: 10px;&#125;.imgtext-h--product li &#123; border-bottom: 1px dashed #cccccc; padding-top: 15px; padding-bottom: 15px;&#125; 多组值参数mixin如果一个参数可以有多组值，如box-shadow、transition等，那么参数则需要在变量后加三个点表示，如 $variables…。12345678910111213141516171819//sass style//------------------------------- //box-shadow可以有多组值，所以在变量参数后面添加...@mixin box-shadow($shadow...) &#123; -webkit-box-shadow:$shadow; box-shadow:$shadow;&#125;.box&#123; border:1px solid #ccc; @include box-shadow(0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3));&#125;//css style//-------------------------------.box&#123; border:1px solid #ccc; -webkit-box-shadow:0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3); box-shadow:0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3);&#125; @content@content在sass3.2.0中引入，可以用来解决css3的@media等带来的问题。它可以使 @mixin接受一整块样式，接受的样式从123456789101112131415161718 //sass style//------------------------------- @mixin max-screen($res)&#123; @media only screen and ( max-width: $res ) &#123; @content; &#125;&#125;@include max-screen(480px) &#123; body &#123; color: red &#125;&#125;//css style//-------------------------------@media only screen and (max-width: 480px) &#123; body &#123; color: red &#125;&#125; PS： @mixin通过 @include调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从3.2.0版本以后，建议传递参数的用 @mixin，而非传递参数类的使用下面的继承 %。 继承sass中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 @extend，后面紧跟需要继承的选择器。123456789101112131415161718//sass style//-------------------------------h1&#123; color:blue;&#125;.content&#123; @extend h1; background: #ddd;&#125;//css style//-------------------------------h1, .content &#123; color: blue;&#125;.content &#123; background: #ddd;&#125; 占位选择器 %从sass 3.2.0以后就可以定义占位选择器 %。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 @extend去继承相应的样式，都会解析出来所有的样式。占位选择器以 %标识定义，通过 @extend调用。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[less学习笔记]]></title>
    <url>%2F2017%2F12%2F24%2FLESS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[养成学习做笔记的好习惯，从我做起,今天学习less. 简介lesscss是一种动态样式语言，属于css预处理语言的一种，他使用类似css的语法，为css的赋予了动态语言的特性，如变量、继承、运算、函数等，更方便css的编写和维护。lesscss可以在多种语言、环境中实用，包括浏览器端、桌面客户端、服务器。 编译环境1.下载安装visual studio code工具 在扩展中装插件easy less,easy sass,view in browser 注意：安装成功后重新加载一次2.下载安装node.js(编译环境，将所写的less和sass转换成css). LESS 语法注释/**/ 和css没区别用@声明变量变量允许单独定义一系列通用的样式，在需要时可以调用 使用@符号定义12@base:#FFF000;.box&#123;color:@base&#125; //变量的引用 使用@import导入(此方式支持url)12@images:"../img";body&#123;background:url("@&#123;images&#125;/1.jpg");&#125; 属性也支持变量的形式12345@cc:color;.wrap&#123; @&#123;cc&#125;:black; background-@&#123;cc&#125;:#ddd;&#125; 普通混合：定义一些属性为一个class，在另一个class中调用12345678910.myBorder&#123; //模式定义 border-left:30px solid red; border-right:10px dotted green;&#125;.box&#123; width:50px; height:50px; background:gray; .myBorder;//模式调用&#125; 注意：这样写会有缺陷,我们看看转换成css后的结果1234567891011.myBorder &#123; border-left: 30px solid red; border-right: 10px dotted green;&#125;.box &#123; width: 50px; height: 50px; background: gray; border-left: 30px solid red; border-right: 10px dotted green;&#125; .myBorder是我们设置的模式，但它却出现在css里这显然不是我们想要的结果，我们需要给它加个（）,myBorder(){…} 带参数混合方式123456.setRadius(@size)&#123; border-radius:@size;&#125;.box&#123; setRadius:(10px);&#125; 给参数设置默认值混合方式123456.setRadius(@size:20px)&#123; border-radius:@size;&#125;.box&#123; .setRadius&#125; 怎么样是不是有种定义函数的赶脚^_^ 嵌套规则1234567.box&#123; background:#ddd; .con&#123; font-size:18px; color:purple; &#125;&#125; 让我们看看less转换为css后的结果1234567.box &#123; background: #ddd;//父级属性保留，并没有傻瓜一样出现在下面.con里。&#125;.box .con &#123; font-size: 18px; color: purple;&#125; hover的设置&amp;符比如我们想给box鼠标滑过显示一个10px的边框怎么写呢。123.box&#123; &amp;:hover&#123;border:10px solid black;&#125;&#125; 运算运算提供了加，减，乘，除操作；我们可以做属性值和颜色的运算，这样就可 以实现属性值之间的复杂关系。LESS中的函数一一映射了JavaScript代码，如果 你愿意的话可以操作属性值。12345678910111213@base: 5%;@filler: @base * 2;@other: @base + @filler;@base-color:#666;@var: 1px; #header a &#123; color: #888888/4; background-color: @base-color + #111; height: 100% / 2 + @filler; border-right: @var * 2; width:(@var + 4) * 2; &#125; 看看转换成css的结果1234567#header a &#123; color: #222222; background-color: #777777; height: 60%; border-right: 2px; width: 10px;&#125; 封装拓展12345678910111213#boxSize&#123; .box1()&#123;background:black;&#125; .box2()&#123;background: blue;&#125; .box3()&#123; background:pink; &amp;:hover&#123; background: lightcoral &#125; &#125;&#125;.box&#123; #boxSize&gt;.box3()//调用方式,不传参（）可以省略&#125; 避免编译避免编译就是不编译,有时候需要输出一些不正确的CSS语法或者使用一些 LESS 不认识的专有语法,这时候就只需要代码直接显示,不经过编译 比如下面这段代码123.box&#123; width:calc(100px - 10px)&#125; 编译后为123.box &#123; width:~ "calc(90px)";&#125; 如果我想让它保持width:calc(100px - 10px)呢，我们需要一个~,然后用冒号将变量引起来:123.box &#123; width:~ "calc(90px)";&#125; !important (一般在调试的时候用)在less中，某个类的属性值的最后面加上!important，应用该样式的级别最高。1234567.box2&#123; height:300px !important; &#125;.box2&#123; height:100px; border:1px solid red; &#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于正则的一些事]]></title>
    <url>%2F2017%2F12%2F20%2F%E5%85%B3%E4%BA%8E%E6%AD%A3%E5%88%99%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[本篇主要梳理一下什么是正则，以及正则的运用，都是一些个人的理解,自己的笔记才是最好的笔记。 什么是正则?什么是正则呢，通俗地说就是给计算机读的规则，主要用来匹配字符串。下面是官方的解释:正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。 正则表达式的写法1234var str = 'I am a teacher!';var reg = new RegExp('teacher');console.log(reg.test(str));//true 比如说我们想要知道上面这句英文中有没有’teacher’,正则.测试(目标字符串),结果输出为true，’teacher’存在。 转义 转义字符(元字符) 作用 \w 查找单词字符。 \W 查找非单词字符。 \d 查找数字。 \D 查找非数字字符。 \s 查找空白字符。 \S 查找非空白字符。 \b 匹配单词边界。 \B 匹配非单词边界。 \0 查找 NUL 字符。 \n 查找换行符。 \f 查找换页符。 \r 查找回车符。 \t 查找制表符。 \v 查找垂直制表符。 \xxx 查找以八进制数 xxx 规定的字符。 \xdd 查找以十六进制数 dd 规定的字符。 \uxxxx 查找以十六进制数 xxxx 规定的 Unicode 字符。 \b注意两点:1.\b只能匹配字母、数字、汉字、下划线2.\b就近匹配，比如\bAB 匹配A，AB\b 匹配B；但如果只写一个\b或者在两个字母、数字、汉字、下划线之间有\b时就在所有字符或者两个字母、数字、汉字、下划线之间所有字符去逐个匹配 例子:检测字符串中有没有数字 1234var str = 'CCTV12';var reg = new RegExp(/\d/);console.log(reg.test(str));//true 修饰符 修饰符 作用 i 查找时不区分大小写 g 全局查找匹配 m 多行查找匹配 1234var str = 'YoU HavE A GrEEn HaT';var reg = new RegExp(/a/ig);console.log(str.match(reg));//(3) ["a", "A", "a"] 修饰符可以一起用,上面的代码全局并且不区分大小写地找出了字符串里面的所有的a。 量词 量词 作用 n+ 匹配任何包含至少一个 n 的字符串。 n* 匹配任何包含零个或多个 n 的字符串。 n? 匹配任何包含零个或一个 n 的字符串。 n{X} 匹配包含 X 个 n 的序列的字符串。 n{X,Y} 匹配包含 X 至 Y 个 n 的序列的字符串。 n{X,} 匹配包含至少 X 个 n 的序列的字符串。 n$ 匹配任何结尾为 n 的字符串。 ^n 匹配任何开头为 n 的字符串。 ?=n 匹配任何其后紧接指定字符串 n 的字符串。 ?!n 匹配任何其后没有紧接指定字符串 n 的字符串。 括号表达式 表达式 作用 [abc] 查找方括号之间的任何字符。 [^abc] 查找任何不在方括号之间的字符。 [0-9] 查找任何从 0 至 9 的数字。 [a-z] 查找任何从小写 a 到小写 z 的字符。 [A-Z] 查找任何从大写 A 到大写 Z 的字符。 [A-z] 查找任何从大写 A 到小写 z 的字符。 [adgk] 查找给定集合内的任何字符。 [^adgk] 查找给定集合外的任何字符。 (red│blue│green) 查找任何指定的选项。 String对象的方法 方法函数 作用 search 检索与正则表达式相匹配的值。 match 找到一个或多个正则表达式的匹配。 replace 替换与正则表达式匹配的子串。 split 把字符串分割为字符串数组。 RegExp 对象方法 方法函数 作用 compile 编译正则表达式。 exec 检索字符串中指定的值。返回找到的值，并确定其位置。 test 检索字符串中指定的值。返回 true 或 false。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[es6中匿名函数如何简写]]></title>
    <url>%2F2017%2F12%2F18%2Fes6%E4%B8%AD%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%A6%82%E4%BD%95%E7%AE%80%E5%86%99%2F</url>
    <content type="text"><![CDATA[“=&gt;”的运用1(function()&#123;console.log('aa')&#125;)(); 上面这句话和下面这句话是等价的1(()=&gt;console.log('aa'))(); 中括号可以忽略,输出结果为123aabb[Finished in 0.4s]]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO目录详解]]></title>
    <url>%2F2017%2F12%2F03%2FHEXO%E7%9B%AE%E5%BD%95%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[hexo 中英目录对照 hexo 中英目录1234567891011121314151617181920212223242526272829303132333435363738├── .github #git信息├── languages #多语言| ├── default.yml #默认语言| └── zh-Hans.yml #简体中文| └── zh-tw.yml #繁体中文├── layout #布局，根目录下的*.ejs文件是对主页，| | 分页，存档等的控制| ├── _custom #可以自己修改的模板，覆盖原有模板| | ├── _header.swig #头部样式| | ├── _sidebar.swig #侧边栏样式| ├── _macro #可以自己修改的模板，覆盖原有模板| | ├── post.swig #文章模板| | ├── reward.swig #打赏模板| | ├── sidebar.swig #侧边栏模板| ├── _partial #局部的布局| | ├── head #头部模板| | ├── search #搜索模板| | ├── share #分享模板| ├── _script #局部的布局| ├── _third-party #第三方模板| ├── _layout.swig #主页面模板| ├── index.swig #主页面模板| ├── page #页面模板| └── tag.swig #tag模板├── scripts #script源码| ├── tags #tags的script源码| ├── marge.js #页面模板├── source #源码| ├── css #css源码| | ├── _common #*.styl基础css| | ├── _custom #*.styl局部css| | └── _mixins #mixins的css| ├── fonts #字体| ├── images #图片| ├── uploads #添加的文件| └── js #javascript源代码├── _config.yml #主题配置文件└── README.md #用GitHub的都知道]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
